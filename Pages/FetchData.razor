@page "/fetchdata"
@using EndToEnd.Data
@using EndToEndDB.Data.EndToEnd
@inject AuthenticationStateProvider AuthenticationStateProvider
@*
    Using OwningComponentBase ensures that the service and related services
    that share its scope are disposed with the component.
    Otherwise DbContext in SuggestionService will live for the life of the
    connection, which may be problematic if clients stay
    connected for a long time.
    We access AnnonymousSuggestionService using @Service
*@
@inherits OwningComponentBase<AnnonymousSuggestionService>
<h1>Annonymous Suggestion</h1>
<!-- AuthorizeView allows us to only show sections of the page -->
<!-- based on the security on the current user -->
<AuthorizeView>
    <!-- Show this section if the user is logged in -->
    <Authorized>
        <h4>Hello, @context.User.Identity?.Name!</h4>
        @if (suggestions == null)
        {
            <!-- Show this if the current user has no data... yet... -->
            <p><em>Loading...</em></p>
        }
        else
        {
            <!-- Show the suggestions for the current user -->
            <table class="table">
                <thead>
                    <tr>
                        <th>Date</th>
                        <th>Title</th>
                        <th>Description</th>
                        <th>Votes</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var suggestion in suggestions)
                    {
                        <tr>
                            <td>@suggestion.Date?.ToShortDateString()</td>
                            <td>@suggestion.Title</td>
                            <td>@suggestion.Description</td>
                            <td>@suggestion.Votes</td>
                            <td>
                                <!--Edit the current suggestion-->
                        <button class="btn btn-primary"
                                @onclick="(() => EditSuggestion(suggestion))">
                                    Edit
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            <p>
                <!-- Add a new suggestion -->
            <button class="btn btn-success"
                    @onclick="AddNewSuggestion">
                    Add New Suggestion
                </button>
            </p>

            @if (ShowPopup)
            {
                <!-- This is the popup to create or edit a suggestion -->
                <div class="modal" tabindex="-1" style="display:block" role="dialog">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h3 class="modal-title">Edit Suggestion</h3>
                                <!-- Button to close the popup -->
                        <button type="button" class="close"
                                @onclick="ClosePopup">
                                    <span aria-hidden="true">X</span>
                                </button>
                            </div>
                            <!-- Edit form for the current suggestion -->
                    <div class="modal-body">
                                <input class="form-control" type="text"
                               placeholder="Title" @bind="objAnnonymousSuggestion.Title" />
                                <input class="form-control" type="text"
                               placeholder="Description" @bind="objAnnonymousSuggestion.Description " />
                                <br />
                                <!-- Button to save the suggestion -->
                        <button class="btn btn-success"
                                @onclick="SaveSuggestion">
                                    Save
                                </button>&nbsp;
                                <!--Only show delete button if not a new record -->
                                @if (objAnnonymousSuggestion.Id > 0)
                                {
                                    <!--Button to delete the suggestion-->
                                    <button class="btn btn-danger"
                                @onclick="DeleteSuggestion">
                                        Delete
                                    </button>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }
        }

    </Authorized>
    <!-- Show this section if the user is not logged in -->
    <NotAuthorized>
        <p>You're not signed in.</p>
    </NotAuthorized>
</AuthorizeView>
@code
{
    // AuthenticationState is available as a CascadingParameter
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }
    List<AnnonymousSuggestion> suggestions = new List<AnnonymousSuggestion>();
    private string UserIdentityName = "";
    protected override async Task OnInitializedAsync()
    {
        // Get the current user
        if (authenticationStateTask != null)
        {
            var user = (await authenticationStateTask).User;
            if (user.Identity != null)
            {
                UserIdentityName = user.Identity.Name ?? "";
            }
        }
        // Get the suggestions for the current user
        // We access AnnonymousSuggestionService using @Service
        suggestions = await @Service.GetSuggestionAsync(UserIdentityName);
    }
    AnnonymousSuggestion objAnnonymousSuggestion = new AnnonymousSuggestion();
    bool ShowPopup = false;
    void ClosePopup()
    {
        // Close the Popup
        ShowPopup = false;
    }
    void AddNewSuggestion()
    {
        // Make new suggestion
        objAnnonymousSuggestion = new AnnonymousSuggestion();
        // Set Id to 0 so we know it is a new record
        objAnnonymousSuggestion.Id = 0;
        // Open the Popup
        ShowPopup = true;
    }
    async Task SaveSuggestion()
    {
        // Close the Popup
        ShowPopup = false;
        // A new suggestion will have the Id set to 0
        if (objAnnonymousSuggestion.Id == 0)
        {
            // Create new suggestion
            AnnonymousSuggestion objNewAnnonymousSuggestion = new AnnonymousSuggestion();
            objNewAnnonymousSuggestion.Date = System.DateTime.Now;
            objNewAnnonymousSuggestion.Title = objAnnonymousSuggestion.Title;
            objNewAnnonymousSuggestion.Description = objAnnonymousSuggestion.Description;
            objNewAnnonymousSuggestion.UserName = UserIdentityName;
            // Save the result
            var result =
            @Service.CreateSuggestionAsync(objNewAnnonymousSuggestion);
        }
        else
        {
            // This is an update
            var result =
            @Service.UpdateSuggestionAsync(objAnnonymousSuggestion);
        }
        // Get the suggestions for the current user
        suggestions =
        await @Service.GetSuggestionAsync(UserIdentityName);
    }
    void EditSuggestion(AnnonymousSuggestion annonymousSuggestion)
    {
        // Set the selected suggestion
        // as the current suggestion
        objAnnonymousSuggestion = annonymousSuggestion;
        // Open the Popup
        ShowPopup = true;
    }

    async Task DeleteSuggestion()
    {
        //Close the Popup
        ShowPopup = false;
        //Delete the suggestion
        var result = @Service.DeleteSuggestionAsync(objAnnonymousSuggestion);
        //Get the suggestion for the current user
        suggestions =
        await @Service.GetSuggestionAsync(UserIdentityName);
    }

}